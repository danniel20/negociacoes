{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,S,GAAS,CAAC,aAAD,C;AACTC,U,GAAU,C;AACVC,S,GAAS,Y;AAEXC,a,GAAa,I;AAEbC,Q,GAAQ,I;;gCAECC,iB;AAEZ,iCAAa;AAAA;;AACZ,WAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACA;;;;qCAEqB;;AAErB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,mBAAYI,eAAZ,GAA8B,aAAK;AAClCT,0BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,QAFD;;AAIAR,mBAAYS,SAAZ,GAAwB,aAAK;;AAE5B,YAAG,CAAChB,UAAJ,EAAe;AACdA,sBAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,iBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,oBAAWC,KAAX,GAAmB,YAAU;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACA,UAFD;AAGA;;AAEDE,gBAAQL,UAAR;AACA,QAXD;;AAaAO,mBAAYW,OAAZ,GAAsB,aAAK;AAC1BC,gBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,eAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,QAHD;AAKA,OA1BM,CAAP;AA2BA;;;uCAEuB;;AAEvB,UAAGtB,UAAH,EAAc;AACbC;AACAD,oBAAa,IAAb;AACA;AACD;;;mCAEoBA,U,EAAW;;AAE/BH,aAAO0B,OAAP,CAAgB,iBAAS;;AAExB,WAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC9C1B,mBAAW2B,iBAAX,CAA6BD,KAA7B;AACA;;AAED1B,kBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,OAPD;AAQA","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\nconst version = 4;\nconst dbName = \"aluraframe\";\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n\tconstructor(){\n\t\tthrow new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n\t}\n\n\tstatic getConnection(){\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tlet openRequest = window.indexedDB.open(dbName, version);\n\n\t\t\topenRequest.onupgradeneeded = e => {\n\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t};\n\n\t\t\topenRequest.onsuccess = e => {\n\t\t\t\t\n\t\t\t\tif(!connection){\n\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\tclose = connection.close.bind(connection);\n\t\t\t\t\tconnection.close = function(){\n\t\t\t\t\t\tthrow new Error(\"Você não pode fechar diretamente a conexão\");\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tresolve(connection);\n\t\t\t};\n\n\t\t\topenRequest.onerror = e => {\n\t\t\t\tconsole.log(e.target.error);\n\t\t\t\treject(e.target.error.name);\n\t\t\t};\n\n\t\t});\n\t}\n\n\tstatic closeConnection(){\n\n\t\tif(connection){\n\t\t\tclose();\n\t\t\tconnection = null;\n\t\t}\n\t}\n\n\tstatic _createStores(connection){\n\n\t\tstores.forEach( store => {\n\n\t\t\tif(connection.objectStoreNames.contains(store)){\n\t\t\t\tconnection.deleteObjectStore(store);\n\t\t\t}\n\n\t\t\tconnection.createObjectStore(store, {autoIncrement: true});\n\t\t});\n\t}\n}\n"]}